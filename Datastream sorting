import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.timestamps.AscendingTimestampExtractor;
import org.apache.flink.streaming.api.windowing.assigners.GlobalWindows;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;
import org.apache.flink.streaming.api.windowing.windows.TimeWindow;
import org.apache.flink.streaming.api.functions.windowing.AllWindowFunction;
import org.apache.flink.util.Collector;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class ReliableSortStream {
    public static void main(String[] args) throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // Add this line explicitly to indicate bounded stream (important)
        env.getConfig().setAutoWatermarkInterval(100);

        // Finite DataStream with dates as yyyy-MM-dd
        DataStream<Tuple2<String, String>> input = env.fromElements(
            Tuple2.of("2025-03-10", "A"),
            Tuple2.of("2025-03-08", "B"),
            Tuple2.of("2025-03-09", "C"),
            Tuple2.of("2025-03-07", "D")
        )
        // Assign timestamps for EventTime (required for event-time processing)
        .assignTimestampsAndWatermarks(new AscendingTimestampExtractor<Tuple2<String, String>>() {
            final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            @Override
            public long extractAscendingTimestamp(Tuple2<String, String> element) {
                try {
                    return sdf.parse(element.f0).getTime();
                } catch (Exception e) {
                    throw new RuntimeException("Invalid date format: " + element.f0);
                }
            }
        });

        // Use an Event-Time window that covers all your events
        DataStream<Tuple2<String, String>> sortedStream = input
            .windowAll(TumblingEventTimeWindows.of(Time.days(1))) // 1-day window covers all elements in your example
            .apply(new AllWindowFunction<Tuple2<String, String>, Tuple2<String, String>, TimeWindow>() {
                @Override
                public void apply(TimeWindow window, Iterable<Tuple2<String, String>> values, Collector<Tuple2<String, String>> out) {
                    List<Tuple2<String, String>> list = new ArrayList<>();
                    values.forEach(list::add);
                    list.sort(Comparator.comparing(o -> o.f0));
                    list.forEach(out::collect);
                }
            });

        sortedStream.print();

        env.execute("Reliable Sorting with Unknown Count");
    }
}
