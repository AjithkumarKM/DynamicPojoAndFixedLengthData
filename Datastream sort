DataStream<Tuple2<String, String>> sortedStream = inputStream
            .keyBy(t -> "global")  // Assign all records to a single task
            .process(new GlobalSortFunction());

        sortedStream.print();

        env.execute("Global Sorting Example");
    }

    // KeyedProcessFunction to store and sort elements before emitting
    public static class GlobalSortFunction extends KeyedProcessFunction<String, Tuple2<String, String>, Tuple2<String, String>> {
        private transient ListState<Tuple2<String, String>> listState;
        private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        @Override
        public void open(org.apache.flink.configuration.Configuration parameters) throws Exception {
            ListStateDescriptor<Tuple2<String, String>> descriptor =
                new ListStateDescriptor<>("stored-records", TypeInformation.of(new TypeHint<Tuple2<String, String>>() {}));
            listState = getRuntimeContext().getListState(descriptor);
        }

        @Override
        public void processElement(Tuple2<String, String> value, Context ctx, Collector<Tuple2<String, String>> out) throws Exception {
            // Store elements in state
            listState.add(value);
            // Register a timer to trigger sorting after 100ms
            ctx.timerService().registerProcessingTimeTimer(ctx.timerService().currentProcessingTime() + 100);
        }

        @Override
        public void onTimer(long timestamp, OnTimerContext ctx, Collector<Tuple2<String, String>> out) throws Exception {
            // Retrieve all stored elements
            List<Tuple2<String, String>> elements = new ArrayList<>();
            for (Tuple2<String, String> elem : listState.get()) {
                elements.add(elem);
            }
            listState.clear();

            // Sort elements based on date (f0)
            elements.sort((t1, t2) -> LocalDate.parse(t1._1(), formatter).compareTo(LocalDate.parse(t2._1(), formatter)));

            // Emit sorted elements
            for (Tuple2<String, String> elem : elements) {
                out.collect(elem);
            }
        }
    }
}
