public static class SortFunction extends KeyedProcessFunction<String, Tuple2<String, String>, Tuple2<String, String>> {
        private transient ListState<Tuple2<String, String>> state;
        private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        @Override
        public void open(Configuration parameters) {
            ListStateDescriptor<Tuple2<String, String>> descriptor =
                    new ListStateDescriptor<>("sorted-state", Types.TUPLE(Types.STRING, Types.STRING));
            state = getRuntimeContext().getListState(descriptor);
        }

        @Override
        public void processElement(Tuple2<String, String> value, Context ctx, Collector<Tuple2<String, String>> out) throws Exception {
            List<Tuple2<String, String>> currentList = new ArrayList<>();
            
            // Load existing state
            for (Tuple2<String, String> entry : state.get()) {
                currentList.add(entry);
            }

            // Add the new element and sort
            currentList.add(value);
            currentList.sort(Comparator.comparing(o -> LocalDate.parse(o.f0, formatter)));

            // Clear and update state with sorted elements
            state.clear();
            state.addAll(currentList);

            // Emit sorted elements
            for (Tuple2<String, String> sortedValue : currentList) {
                out.collect(sortedValue);
            }
        }
    }
